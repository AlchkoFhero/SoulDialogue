export async function handler(event) {
    const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
        console.error("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã");
        return {
            statusCode: 500,
            body: JSON.stringify({ error: "–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ –∑–∞–¥–∞–Ω—ã" }),
        };
    }

    let name = "";
    let phone = "";
    let message = "";

    try {
        const body = JSON.parse(event.body);
        name = body.name || "";
        phone = body.phone || "";
        message = body.message || "";
    } catch (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞", err);
        return {
            statusCode: 400,
            body: JSON.stringify({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞" }),
        };
    }

    const text = `
  üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ SoulDialogue
  
  üìÜ ${new Date().toLocaleDateString("ru-RU")}
  ‚è∞ ${new Date().toLocaleTimeString("ru-RU").slice(0, 5)}
  
  üë§ –ò–º—è: ${name}
  üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
  ‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}
    `;

    try {
        const telegramRes = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text,
            }),
        });

        const result = await telegramRes.json();

        if (!telegramRes.ok) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", result);
            return {
                statusCode: telegramRes.status,
                body: JSON.stringify({ error: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", details: result }),
            };
        }

        return {
            statusCode: 200,
            body: JSON.stringify({ ok: true, result }),
        };
    } catch (error) {
        console.error("‚ùå –°–±–æ–π –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏", details: error.message }),
        };
    }
}
